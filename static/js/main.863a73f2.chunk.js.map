{"version":3,"sources":["components/Fullpage.js","components/ScrollTo.js","sections/FirstView.js","components/InfoCard.js","sections/AboutSection.js","components/SkillCard.js","sections/SkillsSection.js","components/HeadLine.js","App.js","serviceWorker.js","index.js"],"names":["Fullpage","children","this","props","className","Component","ScrollTo","console","log","section","activeClass","to","spy","smooth","name","direction","style","maxWidth","src","FirstView","theme","data","title","subtitle","Object","keys","contact","map","key","InfoCard","item","p","info","amount","AboutSection","sections","items","SkillCard","skill","image","eachOne","SkillSection","eachSkill","HeadLine","id","onClick","App","changeTheme","i","state","version","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.863a73f2.chunk.js","sourcesContent":["import React , {Component} from 'react';\r\nimport './Fullpage.css'\r\n\r\nexport class Fullpage extends Component{\r\n    render(){\r\n        const {children} = this.props\r\n        return(\r\n            <div className={`fullpage ${this.props.className || ''}`}>\r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Link, Element } from \"react-scroll\";\r\n\r\nexport const ScrollTo = (props) => {\r\n  return (\r\n    console.log(props.section),\r\n    (\r\n      <Link activeClass=\"active\" to={props.section} spy={true} smooth={true}>\r\n        {props.name ? (\r\n          props.name\r\n        ) : (\r\n          props.direction ? (\r\n          <img style={{ maxWidth: 30 }} src=\"images/up.png\" /> \r\n        ):( <img style={{ maxWidth: 30 }} src=\"images/down.png\" />)\r\n        )}\r\n      </Link>\r\n    )\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Element } from \"react-scroll\";\r\n\r\nimport { Fullpage } from \"../components/Fullpage\";\r\nimport { ScrollTo } from \"../components/ScrollTo\";\r\n\r\nimport data from \"../data.json\";\r\nimport \"./FirstView.css\";\r\nimport \"./theme.css\"; //pak kardan va ezafe kardan dar yek pooshe dige taghiri ijad nemikonad!!!!!!!!!!!!!//\r\n\r\n\r\nexport class FirstView extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Element name=\"fistview\" className=\"element\"></Element>\r\n        <Fullpage className={this.props.theme + \"-section1\"}>\r\n          <h1\r\n            className=\"title\"\r\n          >\r\n            {data.title}\r\n          </h1>\r\n          <h2 className=\"subtitle\">{data.subtitle}</h2>\r\n          <div className=\"flex row all\">\r\n            <div className=\"flex column1\">\r\n              {Object.keys(data.contact).map((key) => {\r\n                return (\r\n                  <img src={`images/${key}.png`} style={{ maxWidth: 30 }} />\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"flex column2\">\r\n              {Object.keys(data.contact).map((key) => {\r\n                return <div>{data.contact[key]}</div>;\r\n              })}\r\n            </div>\r\n          </div>\r\n        </Fullpage>\r\n        <div className=\"arrow\">\r\n          <ScrollTo section=\"about\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./InfoCard.css\"\r\n\r\nexport class InfoCard extends Component {\r\n  \r\n  render() {\r\n    const { item } = this.props;\r\n    return (\r\n      <dev className=\"infoCard\">\r\n        <dev className=\"TitleInfoCard\">{item.title}</dev>\r\n        <dev>\r\n          {item.item.map((p) => {\r\n            return (\r\n              <div className=\"ContentInfoCard\">\r\n                <div className=\"ContentInfoCard-title\">{p.info}</div>\r\n                <div className=\"ContentInfoCard-content\">{p.amount}</div> \r\n              </div>\r\n            );\r\n          })}\r\n        </dev>\r\n      </dev>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Element } from \"react-scroll\";\r\n\r\nimport { Fullpage } from \"../components/Fullpage\";\r\nimport { ScrollTo } from \"../components/ScrollTo\";\r\nimport { InfoCard } from \"../components/InfoCard\";\r\n\r\nimport data from \"../data.json\";\r\nimport \"./AboutSection.css\";\r\n\r\nexport class AboutSection extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Element name=\"about\" className=\"element\"></Element>\r\n        <Fullpage className={this.props.theme + \"-section2\"}>\r\n          <div className=\"info\">\r\n            <div className=\"title2\">\r\n              {\" \"}\r\n              {/*chera agar title1 bezarim, kari nemikone?????????? title */}\r\n              {data.sections[0].title}\r\n            </div>\r\n            {data.sections[0].items.map((p) => {\r\n              return (\r\n                <div className={this.props.theme + \"-info\"}>\r\n                  <InfoCard item={p} />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </Fullpage>\r\n        <div className=\"arrowAbout\">\r\n          <ScrollTo section=\"skills\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./SkillCard.css\";\r\n\r\nexport class SkillCard extends Component {\r\n  render() {\r\n    const { skill } = this.props;\r\n    return (\r\n      <div className=\"row1\">\r\n        <div className=\"img\">\r\n          <img src={skill.image} />\r\n        </div>\r\n        <div className=\"skillImages\">\r\n          {\" \"}\r\n          {skill.items.map((eachOne) => {\r\n            return (\r\n            <div>\r\n              <img src={eachOne.image}/>\r\n            </div>);\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Element } from \"react-scroll\";\r\n\r\nimport { Fullpage } from \"../components/Fullpage\";\r\nimport { SkillCard } from \"../components/SkillCard\";\r\nimport { ScrollTo } from \"../components/ScrollTo\";\r\n\r\nimport data from \"../data.json\";\r\nimport \"./SkillsSection.css\";\r\n\r\nexport class SkillSection extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Element name=\"skills\" className=\"element\"></Element>\r\n        <Fullpage className={this.props.theme + \"-section3\"}>      \r\n          \r\n          <div className=\"skills\">\r\n          <div className=\"title1\">    \r\n            {data.sections[1].title}\r\n          </div>\r\n            {data.sections[1].items.map((eachSkill) => {\r\n              return <SkillCard skill={eachSkill} />;\r\n            })}\r\n          </div>\r\n          <div className=\"arrowSkills\">\r\n          <ScrollTo section=\"fistview\" direction=\"top\" />\r\n        </div>\r\n        </Fullpage>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport { ScrollTo } from \"../components/ScrollTo\";\r\n\r\nimport \"./HeadLine.css\";\r\n\r\nexport class HeadLine extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"headline\">\r\n        <div id=\"image\"> \r\n          <img style={{maxWidth:30}} src=\"./images/theme.png\" onClick={this.props.onClick}\r\n        />\r\n        </div>\r\n        <div>\r\n          <ScrollTo section=\"about\" name=\"About\" />\r\n        </div>\r\n        <div>\r\n          <ScrollTo section=\"skills\" name=\"Skills\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React , {Component} from \"react\";\r\n\r\nimport SnowStorm from 'react-snowstorm';\r\n\r\nimport { FirstView } from \"./sections/FirstView\";\r\nimport { AboutSection } from \"./sections/AboutSection.js\";\r\nimport { SkillSection } from \"./sections/SkillsSection\";\r\nimport { HeadLine } from \"./components/HeadLine\";\r\n\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {version : 1, theme : \"version1\"}\r\n  }\r\n\r\n  changeTheme = () => {\r\n    let i = this.state.version;\r\n    i === 5 ? i=1 : i++;\r\n    let version = \"version\"+i;\r\n    this.setState({version : i});\r\n    console.log(\"version is \"+version)\r\n    this.setState({theme : version});\r\n  }\r\n\r\n  render(){\r\n  return (\r\n  <div className=\"App\">\r\n      <HeadLine onClick={this.changeTheme}/>\r\n      <div>\r\n\t\t\t\t<SnowStorm />\r\n        <FirstView theme={this.state.theme}/>\r\n\t\t\t</div>\r\n      <AboutSection theme={this.state.theme}/>\r\n      <SkillSection theme={this.state.theme}/>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}